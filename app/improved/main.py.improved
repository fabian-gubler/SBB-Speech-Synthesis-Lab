#!/usr/bin/env python3
# coding: utf-8

"""
This script is used to generate synthetic speech given a CSV file 
with randomized input parameters for the TTS service.
"""

import json
import csv
import os
import azure.cognitiveservices.speech as speechsdk

# Read settings from JSON file
with open("settings.json") as settings_file:
    settings = json.load(settings_file)

speech_key = settings["speech_key"]
service_region = settings["service_region"]

# Configure speech service
speech_config = speechsdk.SpeechConfig(subscription=speech_key, region=service_region)

# Configure output directory
output_dir = "output"
if not os.path.exists(output_dir):
    os.makedirs(output_dir)

def synthesize_speech(ssml_text, voice, output_filename):
    # Configure speech synthesis
    speech_config.speech_synthesis_voice_name = voice
    audio_output_config = speechsdk.audio.AudioOutputConfig(filename=output_filename)
    speech_synthesizer = speechsdk.SpeechSynthesizer(
        speech_config=speech_config, audio_config=audio_output_config
    )

    # Get the audio data from the synthesizer.
    print(ssml_text)
    result = speech_synthesizer.speak_ssml_async(ssml_text).get()

    # Check result for errors
    if result.reason == speechsdk.ResultReason.SynthesizingAudioCompleted:
        print("Speech synthesized to [{}] for text [{}]".format(output_filename, ssml_text))
    elif result.reason == speechsdk.ResultReason.Canceled:
        cancellation_details = result.cancellation_details
        print("Speech synthesis canceled: {}".format(cancellation_details.reason))
        if cancellation_details.reason == speechsdk.CancellationReason.Error:
            if cancellation_details.error_details:
                print("Error details: {}".format(cancellation_details.error_details))
        print("Did you update the subscription info?")

def extract_language_and_accent(voice_string):
    parts = voice_string.split('-')
    language = parts[0]
    accent = parts[1]
    return language, accent

with open("combinations.csv", "r", newline="", encoding="utf-8") as csvfile:
    reader = csv.DictReader(csvfile)
    row_count = 0

    for index, row in enumerate(reader, start=1):

        row_count += 1
        if row_count > 1:
            break

        ssml_text = row["ssml_text"]
        voice_string = row["voice"]
        language, accent = extract_language_and_accent(voice_string)

        output_filename = f"{index}_{language}_{accent}.wav"
        output_filepath = os.path.join(output_dir, output_filename)

        synthesize_speech(ssml_text, voice_string, output_filepath)
